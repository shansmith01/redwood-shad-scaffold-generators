import type {
  Create${singularPascalName}Mutation,
  Create${singularPascalName}Input,
  Create${singularPascalName}MutationVariables
} from 'types/graphql'

import { navigate, routes } from '@redwoodjs/router'
import { useMutation } from '@redwoodjs/web'
import type { TypedDocumentNode } from '@redwoodjs/web'
import { toast } from '@redwoodjs/web/toast'
import { Card, CardContent, CardHeader, CardTitle } from 'src/components/ui/card'
import ${singularPascalName}Form from '${importComponentNameForm}'

const CREATE_${singularConstantName}_MUTATION: TypedDocumentNode<
  Create${singularPascalName}Mutation,
  Create${singularPascalName}MutationVariables
> = gql`
  mutation Create${singularPascalName}Mutation($input: Create${singularPascalName}Input!) {
    create${singularPascalName}(input: $input) {
      ${idName}
    }
  }
`

const New${singularPascalName} = () => {
  const [create${singularPascalName}, { loading, error }] = useMutation(
    CREATE_${singularConstantName}_MUTATION,
    {
      onCompleted: () => {
        toast.success('${singularPascalName} created')
        navigate(routes.${pluralRouteName}())
      },
      onError: (error) => {
        toast.error(error.message)
      },
    }
  )

  const onSave = (input: Create${singularPascalName}Input) => {
    create${singularPascalName}({ variables: { input } })
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>New ${singularPascalName}</CardTitle>
      </CardHeader>
      <CardContent>
        <${singularPascalName}Form onSave={onSave} loading={loading} error={error} />
      </CardContent>
    </Card>
  )
}

export default New${singularPascalName}
